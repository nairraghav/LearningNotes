The Cloud
    IaaS
    PaaS
    SaaS

PaaS Manages:
    Servers
    Load Balanaces
    File Storage
    Networking
    Runtime
    OS
    

SaaS manages:
    Application Data
    Data
    Runtime
    OS
    Servers
    Load Balanaces
    File Storage
    Networking

AWS Spans All Categories

Business Benefits of Using AWS
    Minimize Upfront Investment
        Don't need to buy racks, power supplies, connections
    Offers Just-In-Time Infrastructure
        Only allocates what is used what is needed, when it is needed
        Can be costly if this is wrong
        If application doesn't not have the capacity, the application can be down and unable to be accessed (loss of revenue)
        If application has too much capacity, they're overpaying for things not being used (wasted money)
    Cloud Scalability
        Keeps costs low as you don't overpay for services not being used
        Allows you to scale up as you need it
        Teams don't need to worry abotu quanitity of hardware needed or about extra usage
        Also no long-term contracts

Technical benefits
    Scriptable Infrastructure
        Hardware -> Software
        Use APIs to automatically scale infrastructure
            Scaling Out
                Increase number of hardware (more web servers)
            Scaling In
                Decrease number of hardware (removing servers)
            Scaling Up
                Improve performance of hardware, upgrade to a bigger box
            Scaling Down
                Decrease performance of hardware, downgrade to a smaller box
    On-Demand Scaling
        During a campaign, application can be proactively scaled out and then scaled back in once the moment is over
    Improved development lifecycle
        Production can be cloned as development/test environments
    High Availability & Disaster-Recovery Benefits
        Can have multiple datacenters so that if one center is destroyed, all company data is not lost

Elasticity
    Cloud's ability to change depending on demand on the system
    Fixed Capacity
        If change is needed, much planning, time and money are needed to make changes

DBA
    Using APIs and scripting changes
    Geographically distributed systems
    Different data storage options

Design For Failure
    "Everything fails, all the time"
    The idea here is that while failure should be expected within individual components, the entire system can be architected to avoid application failure
    Failure Now -> Failproof Later
    Single points of failure = Bad
    If a web application has both the web server and the database on the same instance, this is not designed for failure
        If anything happens, the entire application fails
        One better step would be to moving the database into its own instance, having multiple web servers, and having a load balancer push to each web server
            The system can now tolerate a web failure without a system-wide failure
            Unfortanately now, the DB and the load balancer are single points of failure
    Avoid single points of failure
    Consider how the fail-over process happens (incorporate into application design)

Implement Elasticity
    Scale components on a fixed basis (hourly, daily, weekly)
        Depends if the traffic is highly predictable
    Scale components in anticipation of an expected event (scale up/out during Superbowl)
    Setup monitoring of metrics and scale based on that
        CPU utilization
        I/O

Process Automation
    Automatic deployment
    System configuration adjustment
    AWS has deployment services

Bootstrapping
    Creating a self-sustaining startup process that runs on its own
    For AWS, the process needed to get applications running on an EC2 instance

Decoupling Components
    Design principle concerned with minimizing dependencies between components in order to improve scalability
    Strive for a system where if one component fails, the other components still keep going

Performance Optimization
    Know the services landscape
        Investigate highly scalable services and how they can solve your problems
    Push the virtualization boundaries
    Monitor your application
        Cloudwatch
        Alarms can trigger automated actions
    Keep up with the changing landscape

Security
    Cloud architects must familiarize themselves with cloud security practices, as well as be aware of how security responsibilities are shared between the cloud provider and customer
        Undeserved reputation for lacking security at the beginning
        Customer is still responsible for a lot of the security implementation
            Cloud Provider
                Physical security
                Infrastructure
                Equipment
                Separation from other customers
            Cloud Customer
                Network-level Security
                Application-level Security
                Data-level Security
        Data must be protected at rest
            Encryption
    Almost all AWS services have an API
        Access keys are required in the request
        Use https to access all AWS API endpoints
        Pass in access key info during build or launch of your application
            Encrypt before sending
        Use IAM roles and launch your instance in a specific role so it will have the access it needs
        Rotate your access keys often
    IAM
        Use IAM to manage acess
        The service used to create users and handle permissions
        Create separate users for different levels of access
        Use Security Groups = Firewalls
    Secure your own application code
    Must remain aware of your responsibility
        Cloud provider will not handle security for totality of the application 

Optimize Cost
    Cost optimization is the ability to avoid, identify, eliminate unnecessary costs
    Embrace the consumption payment model
        Pay as you go
        Only billed for actively used resources
        Number of actively used resources can be optimized
    Match supply with demand
        When using test servers, turn them off at night since they won't be used
        40 hours during workweek instead of 168 hours week
    Autoscaling
        Allows adding/removing of resources as needed
    Cost-Effective Resources should be utilized
        The right EC2 server instance being used
        Scale up/down as required
    Keep tabs on the tab
        Cost Calculators
        Trusted Advisor Recommendations
        Billing Alerts

Shared Security Model
    Both the cloud customer and cloud service provider are responsible for security objectives
    AWS provides Security of the cloud
        Physical security 
        Global Infrastructure
    Client Customer is responsible Security In the Cloud
        Anything put on the infrastructure
        Account and user management security
    Service Categories
        Infrastructure Services
            Examples
                EC2
                EBS (Block Storage)
                AWS Auto Scaling
        Container Services (PaaS)
            Runs on EC2 instances
            Abstracts out platform layer
            Examples:
                RDS
                Elasticsearch
                Elastic Beanstalk
                ECS
        Software Services
            Abstract the platform and management layer
            Endpoints are accessed using APIs
            Examples
                Amazon Elastic Tanscoder
                Amazon Lex
                Amazon Athena
            Shared Security Line for IaaS
                AWS Responsible For
                    Facilities
                    Virtualization Infrastructure
                    Network Infrastructure
                    Hardware Infrastructure
                Customer Responsible For
                    Data At Rest
                    AMIs
                    Applications and supporting software
                    OS
                    Network config
                    Firewall config
                    Account credentials and account management
                    IAM user management
            Shared Security Line for PaaS
                AWS Responsible For
                    OS
                    Application and platform
                    Facilities
                    Virtualization Infrastructure
                    Network Infrastructure
                    Hardware Infrastructure
                Customer Responsible For
                    Data At Rest
                    Data In Transit
                    Network Traffic Protection
                    Firewall config
                    Account credentials and account management
                    IAM user management
            Shared Security Line for SaaS
                AWS Responsible For
                    OS
                    Application and platform
                    Facilities
                    Virualization
                    Infrastructure
                    Network Infrastructure
                    Hardware Infrastructure
                    Network traffic protection
                    Firewall config
                Customer Responsible For
                    Data At Rest
                    Data In Transit
                    Account Credentials and account management
                    IAM user management

IAM Master Account
    Identity Access Management
    When an AWS is first created, it creates the Master account
        The first user created is the Master User (similar to root)
    Master User has access to everything (including billing information)
        Keep this account secured
        Do not used for basic access
    Keeping Master User Secure
        Don't share credentials
        Don't use this user for routine access
        Turn on MFA

IAM: Groups, Roles, and Permissions
    IAM Users
        Newly created user (outside of Master User) has no access by default
            Least privilege policy
        If they need access to console, they need login credentials
        If need API access, requires API Key
        Can give individual permissions or place them in a group
    IAM Groups
        A set of one or more permissions
        Users are added to these groups
        Permissions managed on a group level
    IAM Roles
        Similar to a user
        Assumed by resources requiring the role
        No login credentials
        When a role is assumed, necessary access keys are generated dynamically
        When a role is created, one or more permissions are set to the role
            When a user/role aassumes the role, the permissions will be allowed and available when role is being used
            Previously defined permissions are temporarily rescinded until they have stopped assuming the role
            Way to give access to resources that is normally not taken to act on behalf of the account owner
        Roles can be assumed to:
            Allow temporary security credentials
            An alternative to credential sharing
            No need to define permissions and manage each entity
        Example:
            Third-Party Vendor account access
                AWS recourse can be launched into roles
                Give them an IAM role (no credentials)
                Needed access keys can be embedded into resources at launch, rather than shared or stored on the file system
        Never use your master account to access your resources or manager your services
        Create seprate users, groups, roles, and permissions in IAM
        Only allow access when absolutely needed and only to the specific resources that are needed

Creating A New User
    After creating a Master user, create a new user
        Log in as Master
        Search for IAM
        Go to "Users" on left nav bar
        Click "Add User"
        Follow instructions

Creating A Key Pair
    Done via the EC2 service
        Go to "Key Pairs" in the left navigation bar
    Rotate these keys out every so often
    Good to have different key pairs for different users (dev, production, etc)
    Upon creation, it will generate a .pem file, this is the private key
        Will need to update the accessibility of the file
        Make it read only
            chmod 0400 key-pair.pem

Security Groups
    Security groups determine who can communicate with resources
        Can be applied to multiple resources
    Multiple resources can be applied to a single security group
    By default, resources will be given a default security (with the most limited privileges)
    Security Group Rules
        Traffic Type
            SSH, RDP, HTTPS
        Protocol
            TCP, UDP
        Port Range
        Source
            IP Addresses or Security Group
            Uses CIDR notation
    Use security groups to control the inbound and outbound traffic to AWS resources and follow the principle of least privilege when defining roles
    Consider the following example
        public -> load balancer -> web service -> database
            You want to use security groups to allow anyone to access the load balancer via http/https, only allow load balancer requests tot he webservice, and only web service requests to the database
            This is the benefit of using security groups

Creating A Security Group
    Use the EC2 service
    Find Security Groups under Network & Security groups menu in left nav bar
    Click Create Security Group
        There is one by default
    Provide the information the name and virtual private cloud environment (VPC)
    Add the inbound/outbound rules
    For the source, you can specify the group id instead of an IP

VPC
    Enables AWS resources to be launched into a virtual network defined by the customer
    Successor to EC2 Classic
        Ran in a single flat network
        Network shared with other AWS customers
        Autmatically associated with a public and private IP
        Everything internet addressable
        No longer available after Dec 4th, 2013 -- not secure
    With VPC
        Logically isolated to only one AWS account
        Not automatically addressable via the public internet
        Private and public interface control
        Both inbound and outbound traffic can be controlled
        Muliple IP addresses can be assigned
        Elastic interface networks can be assigned
        VPN connection
    Default VPC
        No configuration
        Ready to use
    VPC Setup
        Choose which region
        Specify range of internal IP ranges for the entire VPC network
            CIDR notation
            Ensure range allows for growth
        Create subnets
            Subset IP range of entire VPC network
            Defined within Availability Zones
        Attach gateway interfaces
    Set up custom VPCs to better protect AWS resources and fully control the security and topology of the network

Amazon EC2
    The service that provides servers
    The elasticity makes the choice between big/small and few/many easy
    Elastic IPs
        Not EC2 instance specific
        Controlled and owned at account level
        Easily remapped from instance to instance
    Failover gracefully by utilizing elastic IPs

Regions and Availability zones
    AWS operates in 22 geographical regions
        Distributed Worldwide
    Each region has multiple availability zones
        Distinct data centers connected via a fast fiber network
    Availabiltiy Zones
        Fast fiber network connection
        Physically isolated (to avoid natural disaster issues)
    Use multiple regions and availability zones to achieve high availability, fault tolerance, and disaster recovery requirements

Amazon Machine Image (AMI)
    Packaged environment and settings
    Basic unit of deployment
    Deploy one or several
    Typical Components
        Template for the root volume
        Launch permissions
        Block device mapping
    Maintain an AMI so that you can restore and clone environments very easily and across multiple availability zones

Bootstrapping
    The process to get an application up and running on an EC2 instance (or other AWS service)
    An example bootstrap process could be:
        Mount drives
        Start services
        Pull down files
        Get latest software
            Apply software patches
        Register with load balancer
    Bootstrapping Tools
        Running custom scripts
            Configuration settings, start services, apply updates
            cloud-init (Linux)
            EC2Config (Windows)
    Use custom scripts or configure management tools to bootstrap instances

Elastic Block Storage (EBS)
    Storage resources separate from ECS
    EBS - persistent
    Local storage - temporary
        Standard
        Provisioned IOPS (Input Output Operations Per Second)
    Volumes up to 16 TB
    Attach multiple volumes to a single instance
    Specify I/O Performance
    Format with a filesystem and use like any other block device
    Create point-in-time snapshots
        Can be used to instantiate new volumes
        Stored on S3
        Stored incrementally (only changed blocks are saved)
            Only billed for amount of data that changed
        Deleting only removes what is not needed by other snapshots
    Copy snapshots across regions
        Immediate access
        Lazy loading of data to new volumes
        Useful for resizing volumes
    Use CloudWatch to view performance metrics
    Utilize EBS and take advantage of incremental snapshots which are automatically uploaded to S3, and keep persistent data independent to EC2 instances

Launching EC2 Instance
    Search for EC2 Service
    Click "Instances" on the left navigation menu
    Launch Instance button
    Select the AMI
        Amazon Linux 1
    Pick Instance Size
        Default Micro Instance
    